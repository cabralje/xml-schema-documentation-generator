#############################################################################
# Don't touch these...
#############################################################################

this_makefile := ${lastword ${MAKEFILE_LIST}}
SHELL = @bash@ -o pipefail -o errexit -o nounset
# all targets are never automatically deleted because they are intermediate
.SECONDARY:
# delete the target of a rule if it has changed and its recipe exits with a
# nonzero exit status
.DELETE_ON_ERROR:

depend = false

#HELP:Default target is "all". Targets include:
.DEFAULT_GOAL = all

#############################################################################
# AUTOCONF inputs

srcdir = @srcdir@
builddir = @builddir@
install_dir = @install_dir@
xml_catalog = @xml_catalog@

#############################################################################
# COMMANDS

# autoconf stuff
MKDIR_P = @MKDIR_P@
INSTALL = @INSTALL@
SED = @SED@
# unix stuff
find = @find@
touch = @touch@

# webb stuff
saxon = java \
  -classpath lib/jars/Saxon-HE-9.7.0-7.jar:lib/jars/xml-resolver-1.2.jar \
  -Dxml.catalog.files=lib/xml-catalog/xml-catalog.xml \
  -Dxml.catalog.verbosity=999 \
  net.sf.saxon.Transform \
  -r:org.apache.xml.resolver.tools.CatalogResolver \
  -x:org.apache.xml.resolver.tools.ResolvingXMLReader \
  -y:org.apache.xml.resolver.tools.ResolvingXMLReader \
  --suppressXsltNamespaceCheck:on \
# additional params to ${saxon}:
#  -s:inputs/empty.xml \
#  -xsl:xsl/mode-component-diagram.xsl \
#  -o:build/nc/PersonType/diagram.dot \
#  -im:"{}component-diagram" \
#  +prefixes-file=./build/prefixes.xml \
#  +xml-catalog-file=./inputs/person-subset/niem/xml-catalog.xml \
#  +backlinks-file=./build/backlinks.xml \
#  root-path=/Users/wr/r/niem/release/model/src/build \
#  prefix=nc \
#  local-name=PersonType

#############################################################################
# variables

build_dir = ${builddir}/build

prefixes_file = ${build_dir}/prefixes.xml
all_sources = ${wildcard ${srcdir}/xsl/*.xsl}
definitions_mk = ${build_dir}/definitions.mk
backlinks_file = ${build_dir}/backlinks.xml

tokens_dir = ${build_dir}/tokens
built_all_token = ${tokens_dir}/built-all
installed_token = ${tokens_dir}/installed
make_dirs_token = ${tokens_dir}/make-dirs
generate_diagrams_token = ${tokens_dir}/generate-diagrams
process_diagrams_token = ${tokens_dir}/process-diagrams
generate_pages_token = ${tokens_dir}/generate-pages

ifneq (${depend},false)
.DEFAULT_GOAL = depend

.PHONY: depend
depend: ${definitions_mk}

${prefixes_file}: ${xml_catalog} ${srcdir}/xsl/collect-prefixes.xsl
	${MKDIR_P} ${dir $@}
	${saxon} -s:$< -o:$@ -xsl:${srcdir}/xsl/collect-prefixes.xsl

${definitions_mk}: ${xml_catalog} ${prefixes_file} ${all_sources}
	${MKDIR_P} ${dir $@}
	${saxon} -s:$< -o:$@ -xsl:${srcdir}/xsl/generate-makefile.xsl \
	  +prefixes-file=${prefixes_file} \
	  +xml-catalog-file=${xml_catalog}

else
namespaces =
-include ${definitions_mk}
ifeq (${namespaces},)
${warning Prequisites/dependencies not present. Run "make depend=true"}
endif

#  ${build_dir}/index.html
#  ${namespaces:%=${build_dir}/index.html}
all_files = \
  ${components:%=${build_dir}/%/index.html}

install_files = ${all_files:${build_dir}/%=${install_dir}/%}

#############################################################################
.PHONY: all #    build everything from $xml_catalog
#HELP:        Default xml_catalog=@xml_catalog@
# all: ${generate_pages_token}
# all: ${all_files}
all: ${components:%=${build_dir}/%/index.html}

${backlinks_file}: ${xml_catalog} | ${prefixes_file} ${xml_catalog} ${all_sources}
	${MKDIR_P} ${dir $@}
	${saxon} -s:$< -o:$@ -xsl:xsl/collect-backlinks.xsl \
	  +prefixes-file=${prefixes_file} \
	  +xml-catalog-file=${xml_catalog}

${build_dir}/%/index.html: ${build_dir}/%/diagram.png.base64 ${build_dir}/%/diagram.map
	${saxon} -s:inputs/empty.xml -o:$@ -xsl:xsl/mode-component-page.xsl \
	  -im:"{}component-page" \
	  +prefixes-file=${prefixes_file} \
	  +xml-catalog-file=${xml_catalog} \
	  +backlinks-file=${backlinks_file} \
	  root-path=${realpath ${build_dir}} \
	  prefix=${word 1,${subst /, ,$*}} \
	  local-name=${word 2,${subst /, ,$*}}

${build_dir}/%/diagram.png.base64: ${build_dir}/%/diagram.png
	base64 --wrap=0 $< > $@

${build_dir}/%/diagram.png ${build_dir}/%/diagram.map: ${build_dir}/%/diagram.dot
	dot -Tpng -o${build_dir}/$*/diagram.png -Tcmapx -o${build_dir}/$*/diagram.map $<

${build_dir}/%/diagram.dot: | ${backlinks_file} ${build_dir}/%/dir-exists-token
	${saxon} -s:inputs/empty.xml -o:$@ \
	  -xsl:xsl/mode-component-diagram.xsl \
	  -im:"{}component-diagram" \
	  +prefixes-file=${prefixes_file} \
	  +xml-catalog-file=${xml_catalog} \
	  +backlinks-file=${backlinks_file} \
	  root-path=${realpath ${build_dir}} \
	  prefix=${word 1,${subst /, ,$*}} \
	  local-name=${word 2,${subst /, ,$*}}

${build_dir}/%/dir-exists-token:
	@ echo $@
	${MKDIR_P} ${dir $@}
	${touch} $@

${generate_pages_token}: ${xml_catalog} ${process_diagrams_token} ${all_sources} ${prefixes_file} \
  ${backlinks_file} style.css
	${saxon} -s:$< -o:${build_dir}/generate-pages-report.txt \
	  -xsl:xsl/generate.xsl \
	  +prefixes-file=${prefixes_file} \
	  +xml-catalog-file=${xml_catalog} \
	  +backlinks-file=${backlinks_file} \
	  root-path=${realpath ${build_dir}}
	${MKDIR_P} ${dir $@}
	${touch} $@

#############################################################################
.PHONY: install #    install everything to $install_dir
#HELP:        Default install_dir=@install_dir@
install: ${install_files}

${install_dir}/%: ${build_dir}/%
	[[ -d ${dir $@} ]] || mkdir -p ${dir $@}
	cp $< $@

endif

#############################################################################
# convenience targets

.PHONY: clean #    clean regular build products
clean:
	${RM} -r ${build_dir}

.PHONY: distclean #    Clean all products
distclean: clean
	${RM} config.log config.status Makefile

#############################################################################
# make help: this must be the last target

.PHONY: help #    Print this help
help:
	@ ${SED} -e '/^\.PHONY:/s/^\.PHONY: *\([^ #]*\) *\#\( *\)\([^ ].*\)/\2\1: \3/p;/^[^#]*#HELP:/s/[^#]*#HELP:\(.*\)/\1/p;d' ${this_makefile}

# don't put anything after this
